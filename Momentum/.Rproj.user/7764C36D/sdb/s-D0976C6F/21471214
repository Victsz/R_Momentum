{
    "contents" : "#import data\npath<- 'RawData//399006.csv'\ns<-getHistoryData(path, f ='%Y/%m/%d')\n#s<-s['2014-01-27/']\ns$VOLUME<-NULL\ntrend<-Trend(s, r=0.03)\n\n#draw trend\nn<-data.frame(row.names = index(s),trend$value,trend$dire)\nnu<-n[which(n$trend.dire==1),]\nnd<-n[which(n$trend.dire!=1),]\nnu$trend.dire<-NULL\nnd$trend.dire<-NULL\nmyTheme<-chart_theme()\nmyTheme$col$dn.col<-'red'\nmyTheme$col$dn.border <- 'red'\nmyTheme$col$up.col <- 'lightgray'\nmyTheme$col$up.border <- 'lightgray'\nchartSeries(x=s,name='a')\naddTA(nu,on =1, col='yellow', lwd=2)\naddTA(nd,on =1, col='red', lwd=2)\n\n\n\n\ns$trend<-trend$value\ns$dire<-trend$d\ns$point<-trend$point\ns$peak<-trend$peakV\nrequire(blotter)\nSymbol<-'s'\ncurrency('CNY')\nget('CNY',envir=FinancialInstrument:::.instrument)\nstock(Symbol,currency = 'CNY', multiplier=1)\nget(Symbol,envir=FinancialInstrument:::.instrument)\nSys.setenv(TZ = 'UTC')\nstartDate <- '2001-01-01'\n\nif (!exists('.blotter')) .blotter <- new.env()\nrm(list=ls(envir=.blotter),envir=.blotter)\nmyAcct<-'myAcct'\nmyPort<-'myPortfolio'\ninitPortf(name=myPort,symbols=Symbol, initDate=startDate,currency='CNY')\ninitAcct(name= myAcct,portfolios=myPort,initDate=startDate,currency='CNY',initEq=10000)\n\n\n\nentryPrice<-0\nisStoped<-F\npices<-1\ndominator<-3\nbottom<-unique(s[s$dire==1,c('point')])\n#Iteration\nfor( i in 1:nrow(s) )\n{\n  # update values for this date\n  \n  CurrentDate <- as.POSIXct(index(s)[i])\n  print(CurrentDate)\n  equity = getEndEq(myAcct, CurrentDate)\n  ClosePrice <- as.numeric(Cl(s[i,]))\n  OpenPrice <- as.numeric(Op(s[i,]))\n  Posn <- getPosQty(myPort, Symbol=Symbol, Date=CurrentDate)\n  \n  direN <- as.numeric(s[i,'dire'])\n  \n  # change market position if necessary\n  if(i>=2) # if the moving average has begun\n  {\n    direO <- as.numeric(s[i-1,'dire'])\n    if(direN==1 & direO == -1)\n    {\n      print('Up Trend')\n      if(Posn == 0 & isStoped)\n      {  \n        isStoped = F \n      }\n    }\n    if(direN== -1 & direO ==1)\n    {\n      print('Down Trend')\n    }\n    \n  \n    if( Posn == 0 & !isStoped) \n    { # No position, test to go Long\n      if( direN == 1 ) \n      {\n        lastBottom <- coredata(Cl(s[max(bottom[bottom<i]),]))\n        if(as.numeric(s[i-1,'dire']) == -1){\n        cBottom <-  coredata(Cl(s[i,]))\n        if(lastBottom<cBottom)\n        {\n          pices = min(pices+1,dominator);\n          \n        }else{\n          \n          pices = 1;\n        }}\n        investMoney<-(equity*pices)/dominator\n        \n        if(investMoney > 0){\n        fee<-investMoney*0.01\n        \n        UnitSize = as.numeric(trunc(investMoney/ClosePrice))\n        addTxn(myPort, Symbol=Symbol, TxnDate=CurrentDate,\n               TxnPrice=ClosePrice, TxnQty = UnitSize , TxnFees=-fee, verbose =T) \n        entryPrice<- ClosePrice}\n      }\n    }else if(Posn!=0){ # Have a position, so check exit\n      isExit<-F\n      if( direN == -1)\n      {\n        isExit = T\n        # exit position\n        lastBottom <- coredata(Cl(s[max(bottom[bottom<i]),]))\n        if(ClosePrice<lastBottom){\n       #   print('Former bottom stop')\n          isExit = T\n        }\n      } \n#       peak<- s$peak[i]\n#       if(ClosePrice< peak*(1-0.015)){\n#         #stop Lose\n#         print('Drawback stop')\n#         isExit = T\n#       } else {\n#         if(ClosePrice> entryPrice*(1+0.08)){\n#           #stop Lose\n#           print('Take profit')\n#           isExit = T\n#         }else if(coredata(Op(s[i,])) < (coredata(Cl(s[i-1,]))*(1-0.003))){\n#           if(ClosePrice< coredata(Cl(s[i-1,]))){\n#             isExit = T\n#             print('Gap Stop')}\n#           \n#         }\n#       }\n      \n      if(isExit){\n        isStoped = T\n        addTxn(myPort, Symbol=Symbol, TxnDate=CurrentDate,\n               TxnPrice=ClosePrice, TxnQty = -Posn , TxnFees=0, verbose =T  ) \n        isExit = F\n      }\n    }\n    \n   \n    \n    \n \n    # Calculate P&L and resulting equity with blotter\n    \n    updatePortf(myPort,Dates = CurrentDate)\n    updateAcct(myAcct, Dates = CurrentDate)\n    updateEndEq(myAcct, Dates = CurrentDate)\n  } # End dates loop\n}\n\nchart.Posn(myPort,Symbol,theme=myTheme)\n\nts<-getTxns(Portfolio=myPort, Symbol=Symbol)\nView(ts)\ntstats <- tradeStats(Portfolio=myPort, Symbol=Symbol)\n\n\n# tab.trades <- cbind(\n#   c(\"Trades\",\"Win Percent\",\"Loss Percent\",\"W/L Ratio\"),\n#   c(tstats[,\"Num.Trades\"],tstats[,c(\"Percent.Positive\",\"Percent.Negative\")],\n#     tstats[,\"Percent.Positive\"]/tstats[,\"Percent.Negative\"]))\n# \n# tab.profit <- cbind(\n#   c(\"Net Profit\",\"Gross Profits\",\"Gross Losses\",\"Profit Factor\"),\n#   c(tstats[,c(\"Net.Trading.PL\",\"Gross.Profits\",\"Gross.Losses\",\n#               \"Profit.Factor\")]))\n# \n# tab.wins <- cbind(\n#   c(\"Avg Trade\",\"Avg Win\",\"Avg Loss\",\"Avg W/L Ratio\"),\n#   c(tstats[,c(\"Avg.Trade.PL\",\"Avg.Win.Trade\",\"Avg.Losing.Trade\",\n#               \"Avg.WinLoss.Ratio\")]))\n# trade.stats.tab <- data.frame(tab.trades,tab.profit,tab.wins)\n# \n# require(PerformanceAnalytics)\n# rets <- PortfReturns(Account = myAcct)\n# rownames(rets) <- NULL\n# charts.PerformanceSummary(rets,colorset = bluefocus)\n# \n# \n# tab.perf <- table.Arbitrary(rets,\n#                             metrics=c(\n#                               \"Return.cumulative\",\n#                               \"Return.annualized\",\n#                               \"SharpeRatio.annualized\",\n#                               \"CalmarRatio\"),\n#                             metricsNames=c(\n#                               \"Cumulative Return\",\n#                               \"Annualized Return\",\n#                               \"Annualized Sharpe Ratio\",\n#                               \"Calmar Ratio\")\n# )\n# \n# # tab.risk <- table.Arbitrary(rets,\n# #                             metrics=c(\n# #                               \"StdDev.annualized\",\n# #                               \"maxDrawdown\",\n# #                               \"VaR\",\n# #                               \"ES\"),\n# #                             metricsNames=c(\n# #                               \"Annualized StdDev\",\n# #                               \"Max DrawDown\",\n# #                               \"Value-at-Risk\",\n# #                               \"Conditional VaR\"))\n",
    "created" : 1404551285071.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1222914903",
    "id" : "21471214",
    "lastKnownWriteTime" : 1404291250,
    "path" : "C:/Users/Victor/OneDrive/R/Momentum/BackTest.R",
    "project_path" : "BackTest.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}