{
    "contents" : "#install.packages(\"quantstrat\", repos=\"http://R-Forge.R-project.org\")\n#install.packages(\"lubridate\")\nrequire(\"lubridate\")\nrequire(blotter)\n\nrequire(quantstrat)\n\ngetHistoryData<- function(x, f = '%d/%m/%Y %H:%M:%S')\n{\n  z<-read.zoo(x,format = f,header = TRUE,index.column = 1, sep = ',', FUN=as.POSIXct)\n  return(as.xts(z))\n}\n\nTrend<-\nfunction(df,r = 0.001)\n{\n  \n  waveCount <- 0\n  peak<-0\n  bottom<-0\n  peakList<-NULL\n  bottomList<-NULL\n  \n  cl<-Cl(df)\n  length <-length(cl)\n  lo<-Lo(df)\n  hi<-Hi(df)\n  td<- seq(length.out =length, by = 0)\n  dire<- seq(length.out =length, by = 0)\n  point <-seq(length.out =length, by = 0)\n  value<- seq(length.out =length, by = 0)\n  trendLine<- seq(length.out =length, by = 0)\n  peakV<-seq(length.out =length, by = 0)\n  bottomV<-seq(length.out =length, by = 0)\n  value[1] <- coredata(cl[1]) \n  peakV[1]<-coredata(hi[1])\n  bottomV[1]<-coredata(lo[1])\n  point[1]<-1\n  strength <- 1\n  peak <- coredata(cl[1]); \n  bottom <- coredata(cl[1]); \n  \n  \n  trendLine[1]<-coredata(lo[1]); \n  \n  dire[1] <- 1\n  waveCount ++;\n  peakList<-c(hi[1],peakList)\n  for(i in 2:length(cl))\n  { \n    isReverse <- F \n    if(dire[i-1] == -1)\n    {\n      if(bottom>coredata(lo[i]))\n      {\n        bottom = coredata(lo[i])   \n        bottomList<-c(lo[i],bottomList)\n      }   \n      bottomV[i]= bottom\n    \n      strength<- as.numeric(1+(peak - bottom)/peak)\n      print(strength)\n      l<-bottom*(1+r*strength)\n      clo<-coredata(cl[i])\n      if(coredata(l)< coredata(clo))\n      {\n        #reverse\n        isReverse <- T\n        dire[i] = 1;\n        point[i] = i;\n        \n        start <- point[i-1]\n        end<- i -1\n        clo <- coredata(cl[end])\n        if(start<end){\n          startCl <-coredata(cl[start])\n          nVal<- seq(from = startCl , to = clo, length.out  = (end - start)+1)\n                  \n          nlist<-c((start):(start+length(nVal) -1))\n     \n          value = replace(x = value, list = nlist, values =  nVal );\n        }else{\n          \n          value[i-1] = coredata(cl[i-1]);\n        }\n        peak<-coredata(hi[i])\n      }else\n      {\n        dire[i] = -1;   \n        point[i] = point[i-1];\n          \n      }      \n     \n    }\n    else{\n    \n      if(coredata(hi[i])>peak)\n      {\n        peak = coredata(hi[i])\n        peakList<-c(hi[i],peakList)\n      }\n      peakV[i]=peak\n      \n      strength <- as.numeric(peak/bottom)\n      print(strength)\n      h<- peak*(1 - r* (strength))\n      clo<-coredata(cl[i])\n      if( coredata(h)>clo )\n      {\n        #Reverse\n        isReverse <- T\n        dire[i] = -1;\n        point[i] = i;\n        \n        start <- point[i-1] \n        end<- i \n        clo <- coredata(cl[end])\n        if(start<end){\n          startCl <-coredata(cl[start])\n          nVal<- seq(from = startCl, to = clo, length.out  = (end - start)+1)\n                   \n          nlist<-c((start):(start+length(nVal) -1))\n        \n         value= replace(x = value, list = nlist, values =  nVal );\n        }else\n        {          \n          value[end] = coredata(cl[end]);\n        }\n        bottom<-coredata(lo[i])\n      }else\n      {      \n        dire[i] = 1;   \n        point[i] = point[i-1];\n\n      }     \n      \n    }\n    \n    if(td[i-1] == -1)\n    {\n      if(coredata(cl[i]) > trendLine)\n      {\n        td[i-1]++;\n      }\n      \n      if(dire[i] == 1) \n      {\n        if(peak > peakList[2])\n        \n      }\n      \n    }\n    else{\n      \n    }\n  }\n  # Tail\n  if(point[length]<=length){\n  start <- point[length]\n  end<- length\n\n  if(start<end){\n    \n    start <- point[i-1] \n    end<- length\n    clo <- coredata(cl[end])\n    startCl <-coredata(cl[start])\n   \n    nVal<- seq(from = startCl, to = clo, length.out  = (end - start)+1)\n    nlist<-c((start):(start+length(nVal) -1))\n    value= replace(x = value, list = nlist, values =  nVal );\n  }else\n  {    \n    value[length] =  coredata(cl[length]);\n  }}\n  trend<-data.frame(dire,point,value,bottomV,peakV)\n  return (trend)\n  \n}\n\n\n\ndrawTrend <- function (trend,s) {\n  n<-data.frame(row.names = index(s),trend$value,trend$dire)\n  nu<-n[which(n$trend.dire==1),]\n  nd<-n[which(n$trend.dire!=1),]\n  nu$trend.dire<-NULL\n  nd$trend.dire<-NULL\n  myTheme<-chart_theme()\n  myTheme$col$dn.col<-'red'\n  myTheme$col$dn.border <- 'red'\n  myTheme$col$up.col <- 'lightgray'\n  myTheme$col$up.border <- 'lightgray'\n  chartSeries(x=s,name='a')\n  addTA(nu,on =1, col='yellow', lwd=2)\n  addTA(nd,on =1, col='red', lwd=2)\n}",
    "created" : 1404549225119.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "597242630",
    "id" : "A74B43EB",
    "lastKnownWriteTime" : 1404558844,
    "path" : "C:/Users/Victor/OneDrive/R/Momentum/Func.R",
    "project_path" : "Func.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}