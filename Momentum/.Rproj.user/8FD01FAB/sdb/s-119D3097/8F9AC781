{
    "contents" : "require(PerformanceAnalytics)\n#import data\npath<- 'RawData//399006.csv'\n\ns<-getHistoryData(path, f ='%Y/%m/%d')\n\n\ns$VOLUME<-NULL\nwaves<-generateWaves(s, r=0.02)\ntrends <- generateTrends(s,waves = waves, r=0.01)\ntrendLine <- getTrendLine(trends,s,range = 0.05) \nisDraw <- F\nif(isDraw){\n\n\ncurves <- getWaveCurve(waves)\nupCurve <- curves[[1]]\ndownCurve <- curves[[2]]\n\nmyTheme<-chart_theme()\nmyTheme$col$dn.col<-'red'\nmyTheme$col$dn.border <- 'red'\nmyTheme$col$up.col <- 'lightgray'\nmyTheme$col$up.border <- 'lightgray'\nchartSeries(x=s,name='a')\naddTA(upCurve,on =1, col='yellow', lwd=0.5)\naddTA(downCurve,on =1, col='red', lwd=0.5)\n\naddTA(trendLine$up,on =1, col='cyan', lwd=2)\naddTA(trendLine$down,on =1, col='coral', lwd=2)\naddTA(trendLine$dash,on =1, col='beige', lwd=2)\n}\n\ntrends$startDate <- index(s)[trends$start]\ntrends$breakDate <- index(s)[trends$breakPoint]\ntrends$endDate <- index(s)[trends$end]\n\n#init portfolio\nrequire(blotter)\nSymbol<-'s'\nCNY <- 'CNY'\ncurrency(CNY)\nget(CNY,envir=FinancialInstrument:::.instrument)\nstock(primary_id = Symbol, currency = CNY, multiplier=1) \nget(Symbol,envir=FinancialInstrument:::.instrument)\n\nSys.setenv(TZ = 'UTC')\nstartDate <- '2001-01-01'\n\nif (!exists('.blotter')) .blotter <- new.env()\nrm(list=ls(envir=.blotter),envir=.blotter)\nmyAcct<-'myAcct'\nmyPort<-'myPortfolio'\ninitPortf(name=myPort,symbols=Symbol, initDate=startDate,currency=CNY)\ninitAcct(name= myAcct,portfolios=myPort,initDate=startDate,currency=CNY,initEq=10000)\ntxnFeesR <- 0.0\n\n\n#Iteration\nfor( i in 2:nrow(s) )\n{\n  isSell <- F\n  isBuy  <- T\n  curDate <- as.POSIXct(index(s)[i])\n  if(i < nrow(s))\n  {\n    nextDate <- as.POSIXct(index(s)[i+1])\n    nextOp <- as.numeric(Op(s[i+1,]))\n  }else\n  {\n    nextDate <- NULL\n    nextOp <- NULL\n  }\n\n  equity = getEndEq(myAcct, curDate) \n  cl <- as.numeric(Cl(s[i,]))\n  posn <- getPosQty(myPort, Symbol=Symbol, Date=curDate)\n  \n  isSell <- checkIsSell(posn =  posn, cl = cl, curDate = curDate,trends = trends,i = i)\n  isBuy <- checkIsBuy(cl = cl, curDate = curDate,trends = trends,i = i)\n  if(isSell & !is.null(nextDate))\n  {\n    addTxn(myPort, Symbol=Symbol, TxnDate=nextDate,\n           TxnPrice=nextOp, TxnQty = -posn , TxnFees= -100) \n  }\n  if(posn <= 0 & isBuy & !is.null(nextDate))\n  {\n     addTxn(myPort, Symbol=Symbol, TxnDate=nextDate,\n           TxnPrice=nextOp, TxnQty = as.integer(equity/cl) , TxnFees=0) \n  } \n#   updatePortf(myPort,Dates = curDate)\n#   updateAcct(myAcct, Dates = curDate)\n#   updateEndEq(myAcct, Dates = curDate)   \n   \n}\nupdatePortf(myPort)\nupdateAcct(myAcct)\nupdateEndEq(myAcct)  \nchart.Posn(myPort,Symbol,theme=myTheme)\n\nts<-getTxns(Portfolio=myPort, Symbol=Symbol)\n\n\nView(ts)\ntstats <- tradeStats(Portfolio=myPort, Symbol=Symbol)\n\n tab.trades <- cbind(\n   c(\"Trades\",\"Win Percent\",\"Loss Percent\",\"W/L Ratio\"),\n   c(tstats[,\"Num.Trades\"],tstats[,c(\"Percent.Positive\",\"Percent.Negative\")],\n     tstats[,\"Percent.Positive\"]/tstats[,\"Percent.Negative\"]))\n \n tab.profit <- cbind(\n   c(\"Net Profit\",\"Gross Profits\",\"Gross Losses\",\"Profit Factor\"),\n   c(tstats[,c(\"Net.Trading.PL\",\"Gross.Profits\",\"Gross.Losses\",\n               \"Profit.Factor\")]))\n\n tab.wins <- cbind(\n   c(\"Avg Trade\",\"Avg Win\",\"Avg Loss\",\"Avg W/L Ratio\"),\n   c(tstats[,c(\"Avg.Trade.PL\",\"Avg.Win.Trade\",\"Avg.Losing.Trade\",\n               \"Avg.WinLoss.Ratio\")]))\n\ntrade.stats.tab <- data.frame(tab.trades,tab.profit,tab.wins)\nView(trade.stats.tab)\n\n\nrets <- PortfReturns(Account=myAcct)\nrownames(rets) <- NULL\ntail(rets)\ncharts.PerformanceSummary(rets,colorset = bluefocus)\ntab.perf <- table.Arbitrary(rets,\n                            metrics=c(\n                              \"Return.cumulative\",\n                              \"Return.annualized\",\n                              \"SharpeRatio.annualized\",\n                              \"CalmarRatio\"),\n                            metricsNames=c(\n                              \"Cumulative Return\",\n                              \"Annualized Return\",\n                              \"Annualized Sharpe Ratio\",\n                              \"Calmar Ratio\"))\ntab.perf \n\ntab.risk <- table.Arbitrary(rets,\n                            metrics=c(\n                              \"StdDev.annualized\",\n                              \"maxDrawdown\",\n                              \"VaR\",\n                              \"ES\"),\n                            metricsNames=c(\n                              \"Annualized StdDev\",\n                              \"Max DrawDown\",\n                              \"Value-at-Risk\",\n                              \"Conditional VaR\"))\ntab.risk\n\nperformance.stats.tab <- data.frame(\n  rownames(tab.perf),tab.perf[,1],\n  rownames(tab.risk),tab.risk[,1])\nView(performance.stats.tab)\n# \n# require(PerformanceAnalytics)\n# rets <- PortfReturns(Account = myAcct)\n# rownames(rets) <- NULL\n# charts.PerformanceSummary(rets,colorset = bluefocus)\n# \n# \n# tab.perf <- table.Arbitrary(rets,\n#                             metrics=c(\n#                               \"Return.cumulative\",\n#                               \"Return.annualized\",\n#                               \"SharpeRatio.annualized\",\n#                               \"CalmarRatio\"),\n#                             metricsNames=c(\n#                               \"Cumulative Return\",\n#                               \"Annualized Return\",\n#                               \"Annualized Sharpe Ratio\",\n#                               \"Calmar Ratio\")\n# )\n# \n# # tab.risk <- table.Arbitrary(rets,\n# #                             metrics=c(\n# #                               \"StdDev.annualized\",\n# #                               \"maxDrawdown\",\n# #                               \"VaR\",\n# #                               \"ES\"),\n# #                             metricsNames=c(\n# #                               \"Annualized StdDev\",\n# #                               \"Max DrawDown\",\n# #                               \"Value-at-Risk\",\n# #                               \"Conditional VaR\"))\n",
    "created" : 1406275427905.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "559265256",
    "id" : "8F9AC781",
    "lastKnownWriteTime" : 1406275451,
    "path" : "C:/Users/Legend/SkyDrive/GitHub/R_Momentum/Momentum/BackTest.R",
    "project_path" : "BackTest.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}