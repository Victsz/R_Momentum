{
    "contents" : "getTrendLine <- function(trends,mkt)\n{ \n  upTrendLine<- rep(NA, nrow(mkt))\n  downTrendLine<- rep(NA, nrow(mkt))\n  dashLine<- rep(NA, nrow(mkt))\n  lastEnd <- 0\n  trendCount <- nrow(trends)\n  for(t in 1 : trendCount)\n  {\n    trend <- trends[t,]\n    dire <- trend$dire    \n    start <- trend$start    \n    end <- trend$end\n    if(is.na(end))\n    {\n      end <- nrow(mkt)\n    }\n    breakPoint <- trend$breakPoint\n    step <- trend$step\n    if(dire==1){\n      upTrendLine<-calTrendValue(startPoint = mkt[start], trendLine = upTrendLine,start = start, end = end,dire = dire,step = step, lineStart = breakPoint)\n    }else\n    {\n      downTrendLine<-calTrendValue(startPoint = mkt[start], trendLine = downTrendLine,start = start, end = end,dire = dire,step = step, lineStart = breakPoint)\n    }\n    dashLine <-calTrendValue(startPoint = mkt[start], trendLine = dashLine,start = start, end = breakPoint -1 ,dire = dire,step = step)\n  }\n  # connect from breakpoint to end\n  names(upTrendLine) <- index(mkt)\n  upTrendLine<-upTrendLine[!is.na(upTrendLine)]\n  names(downTrendLine) <- index(mkt)\n  downTrendLine<-downTrendLine[!is.na(downTrendLine)]\n  names(dashLine) <- index(mkt)\n  dashLine<-dashLine[!is.na(dashLine)]\n  return (list(up = upTrendLine,down = downTrendLine,dash = dashLine))\n}\n\ncalTrendValue <- function (startPoint,trendLine,start,end,dire,step,lineStart = -1) \n{\n  inL<-length(trendLine)  \n  \n  if(lineStart <= 0)\n  {\n    lineStart <- start\n  }\n  startV <-ifelse(dire==1,coredata(Lo(startPoint)),coredata(Hi(startPoint)))\n  nVal<- seq(from =startV ,length.out = end - start +1, by = step)\n  \n  \n  if(lineStart  > start){\n    subS <- lineStart - start + 1\n    nVal <- nVal[subS: length(nVal)]  \n  } \n  nlist<-c((lineStart):(lineStart+length(nVal) -1))\n  \n  trendLine <- replace(x = trendLine, list = nlist, values =  nVal )\n  \n  outL<-length(trendLine)\n  \n  if(inL!=outL)\n  {\n    print('Ex')\n    print(inL)\n    print(outL)\n    print(start)\n    print(lineStart)\n    print(nlist)\n  }\n  return(trendLine)\n  \n}\n\nfindNewTrend <- function(curWave,prevWave1,prevWave2,s,r,i, lastDire, initStart)\n{ \n  newTrend <- NULL\n  breakPoint <- i\n  findTrend <- F\n  curV <- s[i]\n  cl <- coredata(Cl(curV))\n  dire <- NA\n  extrema <- NA\n  start <- NA\n  end <- NA\n  type <- NA\n  curWaveStart <- curWave$waveStart\n  curWaveEnd <- curWave$waveEnd\n  waveEnd <- 0\n  \n  \n  if(cl > (1 +r) * max(prevWave1$peak, prevWave2$peak))\n  {\n    #break, new up trend\n    findTrend <- T \n    dire <- 1\n    start <- curWaveStart\n    extrema <- coredata(Hi(curV))[1]\n    \n    type <- ifelse(lastDire == dire,'Extend', 'Init')\n    if(type == 'Init')\n    {\n      if(coredata(Lo(s[start])) > prevWave1$bottom * (1+r))\n      {\n        start <- prevWave1$bottomI[1]\n      } \n      if(coredata(Lo(s[start])) > prevWave2$bottom* (1+r))\n      {\n        start <- prevWave2$bottomI[1]\n      }\n    }else\n    {\n      start <- initStart\n    }\n  }else if(cl < (1-r) * min(prevWave1$bottom, prevWave2$bottom))\n  {\n    #break, new down trend\n    findTrend <- T\n    dire <- -1\n    start <- curWaveStart\n    extrema <- coredata(Lo(curV))[1]\n    type <- ifelse(lastDire == dire,'Extend', 'Init')\n    if(type == 'Init')\n    {\n      if(coredata(Hi(s[start])) < prevWave1$peak* (1-r))\n      {\n        start <- prevWave1$peakI[1]\n      }\n      if(coredata(Hi(s[start])) < prevWave2$peak* (1-r))\n      {\n        start <- prevWave2$peakI[1]\n      }\n    }else\n    {\n      start <- initStart\n    }\n  }\n  \n  if(findTrend)\n  {\n    # filter trend with low degree\n    step <- 0\n    start <- start - 1 \n    \n    while (abs(step) < r * cl )\n    {      \n      start <- start +1\n      if(start>= breakPoint)\n      {\n        return (newTrend)\n      }\n      step <- calTrendStep(trend = s[start:breakPoint], dire = dire)  \n   \n    }\n    \n    newTrend <- data.frame(dire, start,end, breakPoint, step, type, extrema = extrema) \n  }\n  \n  return (newTrend)\n}\n\ngetFirstTrend <- function(s,waves,r)\n{ \n  waveCount <- length(waves)\n  findTrend <- F\n  start <- NA\n  end <- NA\n  breakPoint <- NA\n  dire <- NA\n  extrema <- NA\n  for(w in 3:waveCount)\n  {\n    prevWave1 <- waves[[w-1]]\n    prevWave2 <- waves[[w-2]]\n    curWave <- waves[[w]]   \n    curWaveStart <- curWave$waveStart \n    curWaveEnd <- curWave$waveEnd\n    firstTrend <- NULL\n    for(i in curWaveStart : curWaveEnd)\n    {\n      breakPoint <- i\n      cl <- coredata(Cl(s[i]))\n      if(cl > (1 +r) * max(prevWave1$peak, prevWave2$peak))\n      {\n        #break, new up trend\n        findTrend <- T \n        dire <- 1\n        start <- curWaveStart\n        extrema <- coredata(Hi(s[i]))[1]\n        break\n      }else if(cl < (1-r) * min(prevWave1$bottom, prevWave2$bottom))\n      {\n        #break, new down trend\n        findTrend <- T\n        dire <- -1\n        start <- curWaveStart\n        extrema <- coredata(Lo(s[i]))[1]\n        break\n      }\n    }\n    if(findTrend)\n    {\n      step <- 0\n      start <- start - 1 \n      # filter trend with low degree\n      while (abs(step) < r * cl )\n      {      \n        start <- start +1\n        if(start>= breakPoint)\n        {\n          findTrend <- F\n          break\n        }\n        step <- calTrendStep(trend = s[start:breakPoint], dire = dire)  \n        \n      }\n    }\n    if(findTrend)\n    {\n      step <- calTrendStep(trend = s[start:breakPoint], dire = dire)\n      \n      firstTrend <- data.frame(dire, start,end, breakPoint, step, type = 'Init',extrema = extrema)\n      break\n    }\n  }\n  return (firstTrend)\n}\n\ngenerateTrends <- function(mkt,waves,r = 0.001)\n{\n  firstTrend <- getFirstTrend(mkt,waves,r)\n  trends <- firstTrend\n  waveCount <- length(waves)\n  length <- nrow(mkt)\n  w <- getWaveByIndex(firstTrend$breakPoint,waves)\n  for(i in firstTrend$breakPoint : length)\n  {\n    cl <- coredata(Cl(mkt[i]))\n    lastTrend <- getLast(trends)\n    trendCount <- nrow(trends)\n    curWave <- waves[[w]]\n    if(!is.na(lastTrend$end))\n    {\n      #last Trend ended\n      prevWave1 <- waves[[w-1]]\n      prevWave2 <- waves[[w-2]]\n      lastInitStart <- trends$start[max(which(x = trends$type=='Init'))]\n      lastDire <- lastTrend$dire\n      newTrend <- findNewTrend(curWave=curWave,prevWave1 =  prevWave1,prevWave2 =  prevWave2,s =  s,r = r,i = i,lastDire = lastDire,initStart = lastInitStart)\n      if(!is.null(newTrend))\n      {\n        trends <- rbind(trends,newTrend)\n      }\n    }else \n    {     \n      # test if trend end\n      dire <- lastTrend$dire\n      if(dire == 1)\n      {\n        # handle step is NA, ie start & break\n        start <- lastTrend$start\n        bottom <- coredata(Lo(mkt[start]))   \n        if(is.na(lastTrend$step))\n        {\n          if(bottom>cl)\n          {\n            # end trend\n            lastTrend$step <- 0\n            lastTrend$end <- i\n          }else\n          {\n            step <- calTrendStep(trend = mkt[start:i], dire = dire)\n            lastTrend$step <- step\n          }\n        }else{\n          \n          step <- lastTrend$step\n          \n          curPoint <- bottom + step * (i - start)\n          isContinusBreak <- cl<curPoint & coredata(Cl(mkt[i-1])) < curPoint - step &  coredata(Cl(mkt[i-2])) < curPoint - step * 2\n          if(isContinusBreak | cl < curPoint * (1 - r))\n          {\n            #break Trend, end trend\n            lastTrend$end <- i\n          }else {\n            # to do record trend High \n            hi <- coredata(Hi(mkt[i]))\n            if(lastTrend$extrema < hi)\n            {\n              lastTrend$extrema <- hi\n            }\n          }\n        }\n        \n        \n        \n      } else if(dire == -1)\n      {\n        start <- lastTrend$start\n        \n        peak <- coredata(Hi(mkt[start])) \n        if(is.na(lastTrend$step))\n        {\n          if(peak<cl)\n          {\n            # end trend\n            lastTrend$step <- 0\n            lastTrend$end <- i\n          }else\n          {\n            step <- calTrendStep(trend = mkt[start:i], dire = dire)\n            lastTrend$step <- step\n          }\n        }else\n        {\n          step <- lastTrend$step\n          curPoint <- peak + step * (i - start)\n          isContinusBreak <- cl>curPoint & coredata(Cl(mkt[i-1])) > curPoint - step &  coredata(Cl(mkt[i-2])) > curPoint - step * 2\n          if(isContinusBreak | cl > curPoint * (1 + r))\n          {\n            #break Trend, end trend\n            lastTrend$end <- i\n          }else {\n            # to do record trend low\n            lo <- coredata(Lo(mkt[i]))\n            if(lastTrend$extrema > lo)\n            {\n              lastTrend$extrema <- lo\n            }\n          }\n          \n        }\n        \n        \n      }\n      trends[trendCount,] <- lastTrend\n      \n    }\n    \n    if(i == curWave$waveEnd)\n    {\n      w <- w+1\n    }\n  }\n  return(trends)\n}\n\ncalTrendStep <- function(trend,dire, useClose = F)\n{\n  step <- NA\n  \n  rowCount <- nrow(trend)\n  if(rowCount==1)\n  {\n    return (step)\n  }\n  startLo <- coredata(Lo(trend[1]))\n  startHi <- coredata(Hi(trend[1]))\n  for(i in 2: rowCount)\n  {\n    if(dire == 1)\n    {\n      if(is.na(step))\n      {\n        step <- 999999\n      }\n      nStep <-(coredata(Lo(trend[i])) - startLo)/i\n      step <- min(step,nStep)\n    }else {\n      if(is.na(step))\n      {\n        step <- -999999\n      }\n      nStep <-(coredata(Hi(trend[i])) - startHi)/i\n      step <- max(step,nStep)\n      \n    }\n  }\n  \n  if(dire == 1 & step<0)\n  {\n    step <- 0    \n  }\n  \n  if(dire == -1 & step > 0)\n  {\n    step <- 0    \n  }\n  \n  return(step)\n}\n\nTrendLineIndicator <- function(trends,mkt)\n{ \n  upTrendLine<- rep(9999, nrow(mkt))\n  downTrendLine<- rep(NA, nrow(mkt))\n  dashLine<- rep(NA, nrow(mkt))\n  lastEnd <- 0\n  trendCount <- nrow(trends)\n  for(t in 1 : trendCount)\n  {\n    trend <- trends[t,]\n    dire <- trend$dire    \n    start <- trend$start    \n    end <- trend$end\n    if(is.na(end))\n    {\n      end <- nrow(mkt)\n    }\n    breakPoint <- trend$breakPoint\n    step <- trend$step\n    if(dire==1){\n      upTrendLine<-calTrendValue(startPoint = mkt[start], trendLine = upTrendLine,start = start, end = end,dire = dire,step = step, lineStart = breakPoint)\n    }else\n    {\n      downTrendLine<-calTrendValue(startPoint = mkt[start], trendLine = downTrendLine,start = start, end = end,dire = dire,step = step, lineStart = breakPoint)\n    }\n    dashLine <-calTrendValue(startPoint = mkt[start], trendLine = dashLine,start = start, end = breakPoint -1 ,dire = dire,step = step)\n  }\n  # connect from breakpoint to end\n  #names(upTrendLine) <- index(mkt)\n  #upTrendLine<-upTrendLine[!is.na(upTrendLine)]\n#  names(downTrendLine) <- index(mkt)\n#  downTrendLine<-downTrendLine[!is.na(downTrendLine)]\n # names(dashLine) <- index(mkt)\n#  dashLine<-dashLine[!is.na(dashLine)]\n  out <- cbind(upTrendLine, downTrendLine)\n  colnames(out) <- c(\"up\", \"down\")\n  return (out)\n}\n\nTrendLine <- function(mkt, r)\n{\n  waves<-generateWaves(mkt = mkt, r=0.015)\n  trends <- generateTrends(mkt = mkt,waves = waves, r=0.01/2)\n  trendLine <- TrendLineIndicator(trends,mkt) \n  trendLine <- xts(x = trendLine,index(s))  \n  return (trendLine)\n}",
    "created" : 1406083773858.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "73|1|157|0|\n346|1|388|0|\n",
    "hash" : "1859881974",
    "id" : "A9B92BAA",
    "lastKnownWriteTime" : 1406103457,
    "path" : "C:/Users/Legend/SkyDrive/GitHub/R_Momentum/Momentum/TrendHelper.R",
    "project_path" : "TrendHelper.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : true,
    "type" : "r_source"
}