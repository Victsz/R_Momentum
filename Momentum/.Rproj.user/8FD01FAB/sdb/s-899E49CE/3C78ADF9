{
    "contents" : "require(PerformanceAnalytics)\n\nisDraw <- T\nrange <- 0.0015\nr <- 0.0015\n\n\n#import data\npath<- 'RawData//IFB1407.csv'\nformate = '%d/%m/%Y %H:%M'\n# s<-getHistoryData(path, f ='%Y/%m/%d')\ns<-getHistoryData(path, f =formate)\n\ntxnFees <- 19\n\n#init portfolio\nrequire(blotter)\nSymbol<-'s'\nCNY <- 'CNY'\ncurrency(CNY)\nget(CNY,envir=FinancialInstrument:::.instrument)\nstock(primary_id = Symbol, currency = CNY, multiplier=7.7) \nget(Symbol,envir=FinancialInstrument:::.instrument)\n\nSys.setenv(TZ = 'UTC')\nstartDate <- '2001-01-01'\n\nif (!exists('.blotter')) .blotter <- new.env()\nrm(list=ls(envir=.blotter),envir=.blotter)\nmyAcct<-'myAcct'\nmyPort<-'myPortfolio'\ninitPortf(name=myPort,symbols=Symbol, initDate=startDate,currency=CNY)\ninitAcct(name= myAcct,portfolios=myPort,initDate=startDate,currency=CNY,initEq=10000)\n\n\nrequire(quantstrat)\nif (!exists('.strategy')) .strategy <- new.env()\nrm(list=ls(envir=.strategy),envir=.strategy)\nmyStrgy <- 'trendLine'\nrm.strat(myStrgy)\n\ninitOrders(portfolio = myPort,symbols = Symbol,initDate = startDate)\n\nstrategy(name = myStrgy,store = T)\n\nls(.strategy)\nstrat <-getStrategy(myStrgy)\nsummary(strat)\nadd.indicator(strategy = myStrgy,name = 'TrendPoint',arguments = list(mkt = s, r = r, dayAdvance = 0))\n\n#Short\n#Enter\nadd.signal(strategy = myStrgy, name=\"sigThreshold\", \n           arguments=list(threshold = 1, column='shortPoint.TrendPoint.ind', relationship=\"eq\"),\n           label=\"shortSig\")\n\nadd.signal(strategy = myStrgy, name=\"sigThreshold\", \n           arguments=list(threshold = 1, column='shortInitPoint.TrendPoint.ind', relationship=\"eq\"),\n           label=\"shortInitSig\")\n\n\nadd.signal(strategy = myStrgy, name=\"sigFormula\", \n           arguments=list(formula=\"(shortInitSig | shortSig)\",cross = F),\n           label=\"shortBegin\")\n\nadd.rule(strategy = myStrgy , name=\"ruleSignal\",label = 'shortEntry', \n         arguments=list(sigcol=\"shortBegin\", sigval=TRUE, orderqty='', \n                        ordertype=\"market\", \n                        orderside=\"short\",\n                        replace=FALSE, prefer=\"Close\", osFUN = 'orderSize', TxnFees = pennyPerShare(txnFees)), \n         type=\"enter\")\n\n#Exit\nadd.signal(strategy = myStrgy, name=\"sigThreshold\", \n           arguments=list(threshold = -1, column='shortPoint.TrendPoint.ind', relationship=\"eq\"),\n           label=\"shortSig2\")\n\nadd.signal(strategy = myStrgy, name=\"sigThreshold\", \n           arguments=list(threshold = -1, column='shortInitPoint.TrendPoint.ind', relationship=\"eq\"),\n           label=\"shortInitSig2\")\n\n\nadd.signal(strategy = myStrgy, name=\"sigFormula\", \n           arguments=list(formula=\"(shortInitSig2 | shortSig2)\",cross = F),\n           label=\"shortEnd\")\n\n\nadd.rule(strategy = myStrgy, name=\"ruleSignal\", label = 'shortExit', type=\"exit\",\n         arguments=list(sigcol=\"shortEnd\", \n                        sigval=TRUE,\n                        replace=FALSE, \n                        orderside=\"short\",\n                        orderqty=\"all\",\n                        tmult= T,  \n                        ordertype=\"market\", \n                        prefer=\"Close\",\n                        orderset ='ocoshort')        \n)\n\n# Stop & Trailling\n\nadd.rule(strategy = myStrgy, name=\"ruleSignal\", label = 'shortStop', type=\"chain\",parent = 'shortEntry',\n         arguments=list(sigcol=\"shortBegin\", \n                        sigval=TRUE,\n                        replace=FALSE, \n                        orderside=\"short\",\n                        orderqty=\"all\",\n                        tmult= T, \n                        threshold= 0.002,\n                        ordertype=\"stoplimit\", \n                        prefer=\"Open\",\n                        orderset ='ocoshort')         \n)\n\nadd.rule(strategy = myStrgy, name=\"ruleSignal\", label = 'shorttrailing', type=\"chain\", parent = 'shortEntry',\n         arguments=list(sigcol=\"shortBegin\", \n                        sigval=TRUE,\n                        replace=FALSE, \n                        orderside=\"short\",\n                        orderqty=\"all\",\n                        tmult= T, \n                        threshold= 0.002,\n                        ordertype=\"stoptrailing\", \n                        prefer=\"Open\",\n                        orderset ='ocoshort')        \n)\n\n#long\n#Enter\nadd.signal(strategy = myStrgy, name=\"sigThreshold\", \n           arguments=list(threshold = 1, column='longPoint.TrendPoint.ind', relationship=\"eq\"),\n           label=\"longSig\")\n\nadd.signal(strategy = myStrgy, name=\"sigThreshold\", \n           arguments=list(threshold = 1, column='longInitPoint.TrendPoint.ind', relationship=\"eq\"),\n           label=\"longInitSig\")\n\n\nadd.signal(strategy = myStrgy, name=\"sigFormula\", \n           arguments=list(formula=\"(longInitSig | longSig)\",cross = F),\n           label=\"longBegin\")\n\nadd.rule(strategy = myStrgy , name=\"ruleSignal\",label = 'longEntry', \n         arguments=list(sigcol=\"longBegin\", sigval=TRUE, orderqty='', \n                        ordertype=\"market\", \n                        orderside=\"long\",\n                        replace=FALSE, prefer=\"Close\", osFUN = 'orderSize', TxnFees = pennyPerShare(txnFees)), \n         type=\"enter\")\n\n#Exit\nadd.signal(strategy = myStrgy, name=\"sigThreshold\", \n           arguments=list(threshold = -1, column='longPoint.TrendPoint.ind', relationship=\"eq\"),\n           label=\"longSig2\")\n\nadd.signal(strategy = myStrgy, name=\"sigThreshold\", \n           arguments=list(threshold = -1, column='longInitPoint.TrendPoint.ind', relationship=\"eq\"),\n           label=\"longInitSig2\")\n\n\nadd.signal(strategy = myStrgy, name=\"sigFormula\", \n           arguments=list(formula=\"(longInitSig2 | longSig2)\",cross = F),\n           label=\"longEnd\")\n\n\nadd.rule(strategy = myStrgy, name=\"ruleSignal\", label = 'longExit', type=\"exit\",\n         arguments=list(sigcol=\"longEnd\", \n                        sigval=TRUE,\n                        replace=FALSE, \n                        orderside=\"long\",\n                        orderqty=\"all\",\n                        tmult= T,  \n                        ordertype=\"market\", \n                        prefer=\"Close\",\n                        orderset ='ocolong')        \n)\n\n# Stop & Trailling\n\nadd.rule(strategy = myStrgy, name=\"ruleSignal\", label = 'longStop', type=\"chain\",parent = 'longEntry',\n         arguments=list(sigcol=\"longBegin\", \n                        sigval=TRUE,\n                        replace=FALSE, \n                        orderside=\"long\",\n                        orderqty=\"all\",\n                        tmult= T, \n                        threshold= 0.002,\n                        ordertype=\"stoplimit\", \n                        prefer=\"Open\",\n                        orderset ='ocolong')         \n)\n\nadd.rule(strategy = myStrgy, name=\"ruleSignal\", label = 'longtrailing', type=\"chain\", parent = 'longEntry',\n         arguments=list(sigcol=\"longBegin\", \n                        sigval=TRUE,\n                        replace=FALSE, \n                        orderside=\"long\",\n                        orderqty=\"all\",\n                        tmult= T, \n                        threshold= 0.002,\n                        ordertype=\"stoptrailing\", \n                        prefer=\"Open\",\n                        orderset ='ocolong')        \n)\n\n\n\nt1 <- Sys.time()\nout <- applyStrategy(strategy=myStrgy,portfolios=myPort, verbose=T)\nt2 <- Sys.time()\nprint(t2-t1)\nupdatePortf(myPort)\nupdateAcct(myAcct)\nupdateEndEq(myAcct) \n\n\n\n\nmyTheme<-NULL\nmyTheme <- chart_theme()\nmyTheme$col$dn.col<-'bisque4'\nmyTheme$col$up.col <- 'coral3'\nchart.Posn(myPort,Symbol,theme=myTheme)\n\n\nwaves<-generateWaves(s, r=r)\ntrends <- generateTrends(s,waves = waves, r= r)\ntrendLine <- getTrendLine(trends,s,range = range) \n\nif(isDraw){\n  curves <- getWaveCurve(waves)\n  upCurve <- curves[[1]]\n  downCurve <- curves[[2]]\n  \n  myTheme<-chart_theme()\n  myTheme$col$dn.col<-'red'\n  myTheme$col$dn.border <- 'red'\n  myTheme$col$up.col <- 'lightgray'\n  myTheme$col$up.border <- 'lightgray'\n  chartSeries(x=s,name='a')\n  addTA(upCurve,on =1, col='yellow', lwd=0.5)\n  addTA(downCurve,on =1, col='red', lwd=0.5)\n  \n#   addTA(trendLine$up,on =1, col='cyan', lwd=2)\n#   addTA(trendLine$upR,on =1, col='cyan', lwd=2)\n  addTA(trendLine$down,on =1, col='coral', lwd=2)\n  addTA(trendLine$downR,on =1, col='coral', lwd=2)\n  addTA(trendLine$dash,on =1, col='beige', lwd=2)\n}\n\ntrends$startDate <- index(s)[trends$start]\ntrends$breakDate <- index(s)[trends$breakPoint]\ntrends$endDate <- index(s)[trends$end]\n\n\nts<-getTxns(Portfolio=myPort, Symbol=Symbol)\n\nob <- getOrderBook(portfolio = myPort)\n\n\ntstats <- tradeStats(Portfolio=myPort, Symbol=Symbol)\n\ntab.trades <- cbind(\n  c(\"Trades\",\"Win Percent\",\"Loss Percent\",\"W/L Ratio\"),\n  c(tstats[,\"Num.Trades\"],tstats[,c(\"Percent.Positive\",\"Percent.Negative\")],\n    tstats[,\"Percent.Positive\"]/tstats[,\"Percent.Negative\"]))\n\ntab.profit <- cbind(\n  c(\"Net Profit\",\"Gross Profits\",\"Gross Losses\",\"Profit Factor\"),\n  c(tstats[,c(\"Net.Trading.PL\",\"Gross.Profits\",\"Gross.Losses\",\n              \"Profit.Factor\")]))\n\ntab.wins <- cbind(\n  c(\"Avg Trade\",\"Avg Win\",\"Avg Loss\",\"Avg W/L Ratio\"),\n  c(tstats[,c(\"Avg.Trade.PL\",\"Avg.Win.Trade\",\"Avg.Losing.Trade\",\n              \"Avg.WinLoss.Ratio\")]))\n\ntrade.stats.tab <- data.frame(tab.trades,tab.profit,tab.wins)\n",
    "created" : 1406791895337.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "103695928",
    "id" : "3C78ADF9",
    "lastKnownWriteTime" : 1406799848,
    "path" : "C:/Users/Legend/SkyDrive/GitHub/R_Momentum/Momentum/applyStrategyIFB.R",
    "project_path" : "applyStrategyIFB.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : true,
    "type" : "r_source"
}