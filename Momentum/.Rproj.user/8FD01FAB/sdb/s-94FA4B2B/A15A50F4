{
    "contents" : "#install.packages(\"quantstrat\", repos=\"http://R-Forge.R-project.org\")\n#install.packages(\"lubridate\")\nrequire(\"lubridate\")\nrequire(blotter)\n\nrequire(quantstrat)\n\ncalStep <- function(trend,dire, useClose = F)\n{\n  step <- NA\n  rowCount <- nrow(trend)\n  startLo <- coredata(Lo(trend[1]))\n  startHi <- coredata(Hi(trend[1]))\n  for(i in 2: rowCount)\n  {\n    if(dire == 1)\n    {\n      if(is.na(step))\n      {\n        step <- 999999\n      }\n      nStep <-(coredata(Lo(trend[i])) - startLo)/i\n      step <- min(step,nStep)\n    }else {\n      if(is.na(step))\n      {\n        step <- -999999\n      }\n      nStep <-(coredata(Hi(trend[i])) - startHi)/i\n      step <- max(step,nStep)\n     \n    }\n  }\n  \n  if(dire == 1 & step<0)\n  {\n    step <- 0    \n  }\n \n  if(dire == -1 & step > 0)\n  {\n    step <- 0    \n  }\n  \n  print('1step')\n  print(step)\n  return(step)\n}\n\ndrawTrend <- function (startPoint,trendLine,start,end,dire,step,lineStart = -1) \n{\n  print('xstep')\n  print(step)\n  inL<-length(trendLine)  \n  \n  if(lineStart <= 0)\n  {\n    lineStart <- start\n  }\n  startV <-ifelse(dire==1,coredata(Lo(startPoint)),coredata(Hi(startPoint)))\n  nVal<- seq(from =startV ,length.out = length(trendLine) - start +1, by = step)\n \n  \n  if(lineStart  > start){\n    subS <- lineStart - start + 1\n    nVal <- nVal[subS: length(nVal)]  \n  }\n  print(nVal)\n  nlist<-c((lineStart):(lineStart+length(nVal) -1))\n\n  trendLine <- replace(x = trendLine, list = nlist, values =  nVal )\n  \n  outL<-length(trendLine)\n  if(inL!=outL)\n  {\n    print('Ex')\n    print(inL)\n    print(outL)\n    print(start)\n    print(lineStart)\n    print(nlist)\n  }\n  return(trendLine)\n  \n}\n\n\nTrend<-\nfunction(df,r = 0.001)\n{\n  curTrend <- 1\n  isDraw <- F\n  waveCount <- 1\n  peakList<-NULL\n  bottomList<-NULL\n  waveDireList<-NULL\n  \n  peak<-0\n  bottom<-0\n\n  \n  cl<-Cl(df)\n  length <-length(cl)\n  lo<-Lo(df)\n  hi<-Hi(df)\n  td<- seq(length.out =length, by = 0)\n  dire<- seq(length.out =length, by = 0)\n  point <-seq(length.out =length, by = 0)\n  value<- seq(length.out =length, by = 0)\n  trendLine<-seq(length.out =length, by = 0)\n  print(length(trendLine))\n  \n  mainDire<- seq(length.out =length, by = 0)\n  value[1] <- coredata(cl[1]) \n  \n  point[1]<-1\n  strength <- 1\n  peak <- coredata(hi[1]); \n  bottom <- coredata(cl[1]); \n   \n  \n  dire[1] <- 1\n  mainDire[1] <- 1\n  waveDireList<-c('U',waveDireList)\n  bottomList<-c(lo[1],bottomList)\n  peakList<-c(hi[1],peakList)\n  trendStartIndex <- 1\n  for(i in 2:length(cl))\n  { \n    isReverse <- F \n    if(dire[i-1] == -1)\n    {\n      if(bottom>coredata(lo[i]))\n      {\n        bottom <- coredata(lo[i])   \n        bottomList[waveCount]<- lo[i]\n      }   \n      \n      #strength<- as.numeric(1+(peak - bottom)/peak)\n      l<-bottom*(1+r*strength)\n      clo<-coredata(cl[i])\n      if(coredata(l)< coredata(clo))\n      {\n        #reverse\n        \n        waveDireList<-c(waveDireList,'U')\n        if(coredata(lo[i]) <= coredata(bottomList[waveCount]))\n        {\n          bottomList <- c(bottomList,lo[i])          \n        } else \n          {\n          bottomList <- c(bottomList,bottomList[waveCount])\n        } \n        peakList<-c(peakList, hi[i])\n        waveCount <- waveCount + 1\n          \n        isReverse <- T\n        dire[i] = 1\n        point[i] = i\n        \n        start <- point[i-1]\n        end<- i -1\n        clo <- coredata(cl[end])\n        if(start<end){\n          startCl <-coredata(cl[start])\n          nVal<- seq(from = startCl , to = clo, length.out  = (end - start)+1)\n                  \n          nlist<-c((start):(start+length(nVal) -1))\n     \n          value = replace(x = value, list = nlist, values =  nVal)\n        }else{\n          \n          value[i-1] = coredata(cl[i-1])\n        }\n        peak<-coredata(hi[i])\n        \n        if(!isDraw)\n        {\n          isDraw <- T    \n          \n          \n          start <- trendStartIndex \n          end<- i \n          subTrend <- df[start:end,]\n          step<-calStep(subTrend,-1)   \n            trendLine <- drawTrend(startPoint = df[start],trendLine = trendLine, \n                                   start = start, end = end,dire = -1, step = step, lineStart = i)\n        }\n        \n      }else {\n        dire[i] = -1\n        point[i] = point[i-1]\n        mainDire[i] = mainDire[i-1] \n        if(mainDire[i] == 1 )\n        {        \n          if(!is.na(trendLine[i]) & trendLine[i]> coredata(cl[i]))\n          {\n            #trend line break no longer valid\n            trendLine[i:length(trendLine)]<-NA              \n          }\n          \n     \n        }else if(mainDire[i-1] == -1 )  { \n          if(is.na(trendLine[i]))\n          {\n          if(coredata(cl[i])<bottomList[waveCount-1])\n          {\n            \n              # new low redraw trend line\n              start <-  trendStartIndex\n              end<- i \n              subTrend <- df[start:end,]\n              step<-calStep(subTrend,-1)\n              trendLine <- drawTrend(startPoint =  df[start],trendLine =  trendLine, start =  start,end =  end,dire =  -1,step =  step)             \n            }        \n            \n          }\n        }\n      }\n    } else\n      {\n      #dire == 1\n      if(coredata(hi[i])>peak)\n      {\n        peak = coredata(hi[i])\n        peakList[waveCount]<-hi[i]\n      } \n      \n     # strength <- as.numeric(peak/bottom)\n      h<- peak*(1 - r* (strength))\n      clo<-coredata(cl[i])\n      \n      if(coredata(h)>clo)\n      {\n        #Reverse\n        waveDireList<-c(waveDireList,'U')\n        if(coredata(hi[i]) >= coredata(peakList[waveCount]))\n        {\n          peakList <- c(bottomList,hi[i])          \n        } else \n        {\n          peakList <- c(peakList,peakList[waveCount])\n        } \n        \n        bottomList<-c(bottomList,lo[i]) \n        \n        if(coredata(hi[i]) > coredata(peakList[waveCount]))\n        {\n          peakList<-c(peakList,hi[i])\n        } else {\n          peakList<-c(peakList,peakList[waveCount])\n          \n        }\n      \n        waveCount <- waveCount + 1\n                        \n        isReverse <- T\n        dire[i] = -1\n        point[i] = i\n        \n        start <- point[i-1] \n        end<- i \n        clo <- coredata(cl[end])\n        if(start<end){\n          startCl <-coredata(cl[start])\n          nVal<- seq(from = startCl, to = clo, length.out  = (end - start)+1)\n                   \n          nlist<-c((start):(start+length(nVal) -1))\n        \n         value= replace(x = value, list = nlist, values =  nVal )\n        }else\n        {          \n          value[end] = coredata(cl[end])\n        }\n        bottom<-coredata(lo[i])\n        \n        if(!isDraw)\n        {\n          isDraw <- T\n          start <- trendStartIndex    \n          end<- i \n          step <- calStep(df, 1)\n          trendLine <- drawTrend (startPoint =  df[start],trendLine =  trendLine,start =  start,end =  end,dire =  1, step =  step) \n          \n        }\n      }else\n      {      \n        dire[i] = 1\n        point[i] = point[i-1]\n        mainDire[i] = mainDire[i-1] \n        if(mainDire[i] == -1 )\n        {\n          if(!is.na(trendLine[i]) & trendLine[i] < coredata(cl[i]))\n          {\n            #trend line break no longer valid\n            trendLine[i:length(trendLine)]<-NA              \n          }\n        }else if(mainDire[i] == 1 )\n        {\n          \n          if(is.na(trendLine[i]))\n          {\n          if(coredata(cl[i])>peakList[waveCount-1])\n          {\n            \n              # new High redraw trend line\n              start <-  trendStartIndex\n              end <- i \n              subTrend <- df[start:end,]\n              step<-calStep(subTrend,1)\n              trendLine <- drawTrend(startPoint =  df[start],trendLine =  trendLine,start = start,end =  end,dire = 1, step =  step,lineStart =i )   \n            }\n          }\n        }\n      }     \n      \n    }\n    \n    if(mainDire[i-1] == -1 & waveCount>1)\n    {\n      lastPeak <- peakList[waveCount-1]\n      if(coredata(cl[i]) > coredata(lastPeak))\n      {\n        # new Up Trend\n        trendStartIndex <- point[i]\n        \n        isDraw <- F\n        \n        mainDire[i] <- 1\n      } else {\n        mainDire[i] <- -1\n      }      \n      \n    }\n    else  if(waveCount>1){\n      #mainDire == 1\n  \n      lastBottom <- bottomList[waveCount-1]\n      if(coredata(cl[i]) < coredata(lastBottom))\n      {\n        # new down Trend\n        trendStartIndex <- point[i]\n        \n        isDraw <- F\n        \n        mainDire[i] <- -1\n      } else {\n        mainDire[i] <- 1\n      }      \n    }\n  }\n  # Tail\n  if(point[length]<=length){\n  start <- point[length]\n  end<- length\n\n  if(start<end){\n    \n    start <- point[i-1] \n    end<- length\n    clo <- coredata(cl[end])\n    startCl <-coredata(cl[start])\n   \n    nVal<- seq(from = startCl, to = clo, length.out  = (end - start)+1)\n    nlist<-c((start):(start+length(nVal) -1))\n    value= replace(x = value, list = nlist, values =  nVal )\n  }else\n  {    \n    value[length] =  coredata(cl[length])\n  }}\n  print(length(trendLine))\n  \n  trend<-data.frame(dire,point,value,trendLine)\n  \n  return (trend)\n  \n}\n\n\n\n\n\ngetHistoryData<- function(x, f = '%d/%m/%Y %H:%M:%S')\n{\n  z<-read.zoo(x,format = f,header = TRUE,index.column = 1, sep = ',', FUN=as.POSIXct)\n  return(as.xts(z))\n}\n\n# drawTrend <- function (trend,s) {\n#   n<-data.frame(row.names = index(s),trend$value,trend$dire)\n#   nu<-n[which(n$trend.dire==1),]\n#   nd<-n[which(n$trend.dire!=1),]\n#   nu$trend.dire<-NULL\n#   nd$trend.dire<-NULL\n#   myTheme<-chart_theme()\n#   myTheme$col$dn.col<-'red'\n#   myTheme$col$dn.border <- 'red'\n#   myTheme$col$up.col <- 'lightgray'\n#   myTheme$col$up.border <- 'lightgray'\n#   chartSeries(x=s,name='a')\n#   addTA(nu,on =1, col='yellow', lwd=2)\n#   addTA(nd,on =1, col='red', lwd=2)\n# }",
    "created" : 1403675058288.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "8|1|47|0|\n50|1|84|0|\n",
    "hash" : "3308584287",
    "id" : "A15A50F4",
    "lastKnownWriteTime" : 1405316982,
    "path" : "C:/Users/Legend/SkyDrive/R/Momentum/Func.R",
    "project_path" : "Func.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : true,
    "type" : "r_source"
}